#!/usr/bin/env python3
#-*-encoding:utf-8*-

import os
import sys
import random

from lib import *

# TODO    Add notes
# TODO    Todo list, separated by categories
#    For each element on todo list, allow to create sub-todos
#    Do this indefinitely
#    For each todo, allow to take notes, to create a pomodoro timer

# TODO    After actions on commands, have a menu display to see possible actions
#    Anything that forwards to other services

# TODO    Add docgen tool to this

class Assistant:
    def __init__(self):
        self.storage = datastore.Datastore("ass")

    def act(self, command, *a, **k):
        if command == "choose":
            fname = self.storage.data_path("priorize", args["name"])
            got = priorize.act(fname, *a, **k)
            print("Choices:", ", ".join(got))
            if utils.yes_no_ask("Start a Pomodoro session with these tasks ?"):
                p = pomodoro.PomodoroTimer(
                   self.storage.cache_path("pomodoro"),
                   tasklist=[ g.capitalize() for g in got ],
                   **args
                )
                p.start_cli()

        elif command == "edit":
            self.storage.edit_data(args["category"], args["name"])
            return None

        elif command == "aicha":
            assistant = ai.AiAssistant(self.storage.cache_path("aicha"))
            return assistant.act(**args)

        elif command == "pomodoro":
            p = pomodoro.PomodoroTimer(self.storage.cache_path("pomodoro"), **args)
            return p.start_cli()

        else:
            raise Exception(f"Command {command} defined but not implemented")

if __name__ == "__main__":
    cliargs = cli.get_args()

    args = vars(cliargs).copy()
    del args["command"]

    assistant = Assistant()
    assistant.act(cli.get_command(cliargs.command), **args)
