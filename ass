#!/usr/bin/env python3
#-*-encoding:utf-8*-

import os
import sys
import random

from lib import *

# TODO    Pomodoro timer
# TODO    Add notes
# TODO    Todo list, separated by categories
#    For each element on todo list, allow to create sub-todos
#    Do this indefinitely
#    For each todo, allow to take notes, to create a pomodoro timer

# TODO    After actions on commands, have a menu display to see possible actions
#    Anything that forwards to other services

class Assistant:
    def __init__(self):
        # TODO    Create a class DataStore, get paths from it instead of generate by hand
        self.cache_dir = datastore.get_cache_dir()
        self.data_dir = datastore.get_data_path()

    def act(self, command, args, *a, **k):
        # TODO    Add option to bind to a pomodoro timer
        if command == "choose":
            fname = os.path.join(self.data_dir, "priorize", args.name)
            return priorize.act(fname, *a, **k)

        elif command == "edit":
            fname = os.path.join(self.data_dir, args.category, args.name)
            utils.edit_file(fname)
            return None

        elif command == "aicha":
            assistant = ai.AiAssistant(os.path.join(self.cache_dir, "aicha"))
            return assistant.act(args)

        else:
            raise Exception(f"Command {command} defined but not implemented")

if __name__ == "__main__":
    cliargs = cli.get_args()
    assistant = Assistant()
    assistant.act(cli.get_command(cliargs.command), cliargs, verbose=cliargs.verbose)
